#SUBSCRIBED https://raw.githubusercontent.com/yiteei/Clash/refs/heads/Meta/config/Subscription-Userinfo
log-level: silent # 日志等级
find-process-mode: off # 查找进程,不建议使用
mode: rule # 运行模式,暂不支持 script
unified-delay: true # 统一延迟,会计算 RTT,以消除连接握手等带来的不同类型节点的延迟差异
tcp-concurrent: true # TCP 并发,并发向所有 IP 发起 TCP 连接，并选择最快握手成功的结果
ipv6: true # 内核接受 IPv6 流量
allow-lan: true # 允许其他设备通过 Clash 的代理端口访问互联网
bind-address: '*' # 绑定地址,仅允许其他设备通过这个地址访问
authentication:
  # http(s)/socks/mixed 代理的用户验证
  - 'cat:cat' # 用户:密码
skip-auth-prefixes:
  # 跳过验证的 IP 段
  - '127.0.0.1/32'

# geo-auto-update: false
# geo-update-interval: 24
# geodata-mode: false # 更改 geoip 使用文件,mmdb 或者 dat,可选 true/false,true为 dat,此项有默认值 false
# geox-url: { geoip: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geoip-lite.db',geosite: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geosite-lite.dat',mmdb: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/country-lite.mmdb',asn: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/GeoLite2-ASN.mmdb' }

profile: { store-selected: true } # 储存 API 对策略组的选择
external-ui: './external-ui' # 外部用户界面的路径 '/'代表根目录 './'代表当前目录,'../'代表上级目录
external-ui-url: 'https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip' # 自定义外部用户界面下载地址
external-controller: '127.0.0.1:9494' # API 监听地址
secret: 'cat' # API 的访问密钥
external-controller-cors: # API CORS 标头配置
  allow-origins: # 允许哪些前端页面的域名访问 API
    - 'https://board.zash.run.place'
  allow-private-network: true

# tproxy-port: 1234 # tproxy 透明代理端口,可代理 TCP 与 UDP 流量. 仅限 linux(Android) 适用
mixed-port: 2234 # 混合端口 同时支持 HTTP(S) 和 SOCKS5 协议
# redir-port: 0 # redirect 透明代理端口,仅能代理 TCP 流量. 仅限 Linux(Android) 以及 macOS 适用
# socks-port: 0 # socks4/4a/5 代理端口
# port: 0 # http(s) 代理端口
# 端口为 0 时,代表不启用该端口

tun:
  enable: true
  stack: mixed # tun 模式堆栈 system/gvisor/mixed 防火墙未放行内核,则无法使用 system 和 mixed 协议栈
  auto-route: true # 自动设置全局路由,可以自动将全局流量路由进入 tun 网卡
  # auto-redirect: true # 仅支持 Linux,自动配置 iptables/nftables 以重定向 TCP 连接,需要 auto-route 已启用
  auto-detect-interface: true # 自动选择流量出口接口,多出口网卡同时连接的设备建议手动指定出口网卡
  strict-route: false # 严格路由 所有连接路由到 tun 来防止泄漏,但设备将无法被其他设备访问
  device: 'Cat' # 指定 tun 网卡名称,MacOS 设备只能使用 utun 开头的网卡名
  # dns-hijack: [ 'any:53','tcp://any:53' ] # 在 MacOS/Windows 无法自动劫持发往局域网的 dns 请求,在 Android 如开启 私人dns 则无法自动劫持 dns 请求
  mtu: 1500 # 最大传输单元,会影响极限状态下的速率

sniffer:
  # 域名嗅探,通过读取握手包内的域名字段,将 IP 还原成域名,便于进行域名分流
  enable: true
  parse-pure-ip: true # 对所有未获取到域名的流量进行强制嗅探
  force-dns-mapping: false # 对 redir-host 类型识别的流量进行强制嗅探
  # override-destination: false # 是否使用嗅探结果作为实际访问,默认  true
  sniff: { TLS: { ports: [443, 8443] }, QUIC: { ports: [443, 8443] }, HTTP: { ports: [80, 8080-8880] } }
  skip-domain:
    # 需要跳过嗅探的域名,主要解决部分站点 sni 字段非域名,导致嗅探结果异常的问题,如米家设备
    - '+.push.apple.com'
    - 'Mijia Cloud'
    - 'dlg.io.mi.com'
  skip-dst-address:
    - 0.0.0.0/8
    - 10.0.0.0/8
    - 100.64.0.0/10
    - 127.0.0.0/8
    - 169.254.0.0/16
    - 172.16.0.0/12
    - 192.0.0.0/24
    - 192.0.2.0/24
    - 192.88.99.0/24
    - 192.168.0.0/16
    - 198.18.0.0/15
    - 198.51.100.0/24
    - 203.0.113.0/24
    - 224.0.0.0/3
    - ::/127
    - fc00::/7
    - fe80::/10
    - ff00::/8

hosts:
  # 支持单域名多 IP,格式为数组; 支持域名通配符,不使用通配符的域名优先级高于使用通配符的域名
  # 'doh.pub': ['1.12.12.12','120.53.53.53','2402:4e00::']
  'trpc.o3.*': 127.0.0.1 # 环境检测包(trpc.o3.*)拦截
  'www.google.cn': www.google.com # Google 重定向
  'www.g.cn': www.google.com
  'ditu.google.cn': maps.google.com
  'maps.google.cn': maps.google.com
  'services.googleapis.cn': services.googleapis.com

dns:
  # 使用 DoH、DoT、DoQ 协议比传统基于 UDP 的查询更消耗系统资源，且延迟通常更高
  # 使用 Fake IP 可避免需要代理的请求进行本地 DNS 查询. 对于中国用户，建议使用国内 DNS 服务器,配置 8.8.8.8 / 1.1.1.1 等国外 DNS 服务不会带来实际收益
  # 只配置 direct-nameserver ,不配置 proxy-server-nameserver 会导致二次解析,此时 direct-nameserver 用于其余的直连出站
  enable: true # 如为 false,则使用系统 DNS 解析
  # cache-algorithm: arc # 缓存算法,默认 lru
  ipv6: true # false 将返回 AAAA 的空结果
  enhanced-mode: redir-host # DNS 处理模式 fake-ip/redir-host/normal,Meta 回滚了 Redir Host 部分代码,仍然保留 Clash v1.70 以前的 Redir Host 模式的域名传递行为
  default-nameserver: ['quic://223.6.6.6', '114.114.115.115', '218.30.118.6'] # 用于解析 DNS 服务器 的域名,必须为 IP类型,可为加密 DNS
  proxy-server-nameserver: ['https://223.5.5.5/dns-query#ecs=223.6.6.0/24&ecs-override=true', 'https://doh.pub/dns-query#ecs=223.6.6.0/24&ecs-override=true']
  # 用于节点的域名解析,其他 DNS 如需过代理查询时则配置该项以防出现鸡蛋问题
  nameserver-policy:
    'rule-set:site_cn,site_geolocation-cn,site_private': ['https://223.6.6.6/dns-query#&ecs=223.6.6.0/24&ecs-override=true', 'https://doh.pub/dns-query#ecs=223.6.6.0/24&ecs-override=true']
  nameserver: ['https://208.67.220.2/dns-query#ecs=1.0.0.0/24&ecs-override=true&Proxy', 'https://8.8.4.4/dns-query#ecs=1.0.0.0/24&ecs-override=true&Proxy'] # 默认域名解析,如不配置 fallback/proxy-server-nameserver,则都由 nameserver 解析
  direct-nameserver: ['https://223.6.6.6/dns-query#&ecs=223.6.6.0/24&ecs-override=true', 'https://doh.pub/dns-query#ecs=223.6.6.0/24&ecs-override=true']

proxies:
  # 出站配置  dns/direct 等默认开启 udp
  - { name: 'dns-hijack', type: dns } # dns 出站会将请求劫持到内部 dns 模块,所有请求均在内部处理
  - { name: '以太网', type: direct, interface-name: '以太网' } # 网线
  - { name: 'WLAN', type: direct, interface-name: 'WLAN' } # WiFi
  - { name: 'wlan0', type: direct, interface-name: 'wlan0' } # W口
  - { name: 'wlan1', type: direct, interface-name: 'wlan1' }
  - { name: 'rmnet_data0', type: direct, interface-name: 'rmnet_data0' } # 数据
  - { name: 'rmnet_data1', type: direct, interface-name: 'rmnet_data1' }
  - { name: 'rmnet_data2', type: direct, interface-name: 'rmnet_data2' }
  - { name: 'rmnet_data3', type: direct, interface-name: 'rmnet_data3' }
  # 查看接口命令: netsh interface show interface  Tip: 手机需要 root 跑内核 以绑定接口

proxy-providers-anchor:
  # 锚点 如合并时有重复的项,则不会去合并; 锚点名尽量不要含特殊字符
  - &health_check { health-check: { enable: true, url: 'https://www.google.com/generate_204', expected-status: '204', interval: 150 } } # 延迟检测
  - &header { header: { User-Agent: ['mihomo/9.99.9 clash.meta/9.99.9 ClashMeta/9.99.9 FlClash/9.99.9 clash-verge/9.99.9'] } } # UA
  - &update { proxy: 'Update', interval: 43200 } # 更新 provider 使用的节点或策略组/Update provider 的间隔,单位 s  Tip: 设置的过于小可能被机场 ban
  - &filter_exclude { exclude-type: 'http|socks5|trojan|anytls|vmess|ssh', exclude-filter: '(?:流量|期|知|告|入|群|邀|返|循环|官|客|站|址|获|订|机场|下次|版本|备用|已|联系|邮|服务|工单|贩卖|导航|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|作者|(?i:\b(?:USE|USED|TG|TOTAL|EXPIRE|EMAIL|PANEL|CHANNEL|AUTHOR|UPDATE)\b)|\b\d{4}-\d{2}-\d{2}\b|\d+G)' } # 引入筛选/排除,使用筛选可能会在一定程度上增加CPU占用/转发延迟,尤其是使用较为复杂正则的情况下
  - &override { udp: true } # 覆写

proxy-providers:
  # 一个合法的远程代理集里必须包含 proxies 字段,远程代理集为空时会以 DIRECT 替代
  Provider_1:
    type: http # 必须,provider 类型 http/file
    url: 'http://127.0.0.1:38324/download/1' # 机场链接
    path: './proxy_providers/Provider_1.yaml' # 配置保存位置 '.'代表当前目录,'..'代表上级目录
    <<: [*health_check, *header, *update, *filter_exclude]
    override: { <<: *override, additional-prefix: 'A ⊃ ' }
  Provider_2:
    type: http
    url: 'http://127.0.0.1:38324/download/2' # 机场链接
    path: './proxy_providers/Provider_2.yaml'
    <<: [*health_check, *header, *update, *filter_exclude]
    override: { <<: *override, additional-prefix: 'B ⊃ ' }
  Provider_3:
    type: http
    url: 'http://127.0.0.1:38324/download/3' # 机场链接
    path: './proxy_providers/Provider_3.yaml'
    <<: [*health_check, *header, *update, *filter_exclude]
    override: { <<: *override, additional-prefix: 'C ⊃ ' }
  Provider_4:
    type: http
    url: 'http://127.0.0.1:38324/download/4' # 机场链接
    path: './proxy_providers/Provider_4.yaml'
    <<: [*health_check, *header, *update, *filter_exclude]
    override: { <<: *override, additional-prefix: 'D ⊃ ' }
  Baidu:
    type: inline
    health-check: { enable: true, url: 'https://connectivitycheck.platform.hicloud.com/generate_204', expected-status: '204', interval: 0 }
    payload:
      - { name: 'Baidu', type: http, server: cloudnproxy.baidu.com, port: 443, headers: { Host: '153.3.236.22:443', X-T5-Auth: '683556433', Connection: Keep-Aliv, User-Agent: 'okhttp/3.11.0 Dalvik/2.1.0 (Linux; U; Android 11; Redmi K30 5G Build/RKQ1.200826.002) baiduboxapp/11.0.5.12 (Baidu; P1 11)' } }
      - { name: 'Baidu-江苏苏州-CU', type: http, server: 157.0.148.53, port: 443, headers: { Host: '153.3.236.22:443', X-T5-Auth: '683556433', Connection: Keep-Aliv, User-Agent: 'okhttp/3.11.0 Dalvik/2.1.0 (Linux; U; Android 11; Redmi K30 5G Build/RKQ1.200826.002) baiduboxapp/11.0.5.12 (Baidu; P1 11)' } }
      - { name: 'Baidu-江苏南京-CU', type: http, server: 153.3.237.117, port: 443, headers: { Host: '153.3.236.22:443', X-T5-Auth: '683556433', Connection: Keep-Aliv, User-Agent: 'okhttp/3.11.0 Dalvik/2.1.0 (Linux; U; Android 11; Redmi K30 5G Build/RKQ1.200826.002) baiduboxapp/11.0.5.12 (Baidu; P1 11)' } }
      - { name: 'Baidu-河北保定-CU 1', type: http, server: 110.242.70.68, port: 443, headers: { Host: '153.3.236.22:443', X-T5-Auth: '683556433', Connection: Keep-Aliv, User-Agent: 'okhttp/3.11.0 Dalvik/2.1.0 (Linux; U; Android 11; Redmi K30 5G Build/RKQ1.200826.002) baiduboxapp/11.0.5.12 (Baidu; P1 11)' } }
      - { name: 'Baidu-河北保定-CU 2', type: http, server: 110.242.70.69, port: 443, headers: { Host: '153.3.236.22:443', X-T5-Auth: '683556433', Connection: Keep-Aliv, User-Agent: 'okhttp/3.11.0 Dalvik/2.1.0 (Linux; U; Android 11; Redmi K30 5G Build/RKQ1.200826.002) baiduboxapp/11.0.5.12 (Baidu; P1 11)' } }
      - { name: 'Baidu-广东广州-CU 1', type: http, server: 163.177.17.6, port: 443, headers: { Host: '153.3.236.22:443', X-T5-Auth: '683556433', Connection: Keep-Aliv, User-Agent: 'okhttp/3.11.0 Dalvik/2.1.0 (Linux; U; Android 11; Redmi K30 5G Build/RKQ1.200826.002) baiduboxapp/11.0.5.12 (Baidu; P1 11)' } }
      - { name: 'Baidu-广东广州-CU 2', type: http, server: 163.177.17.189, port: 443, headers: { Host: '153.3.236.22:443', X-T5-Auth: '683556433', Connection: Keep-Aliv, User-Agent: 'okhttp/3.11.0 Dalvik/2.1.0 (Linux; U; Android 11; Redmi K30 5G Build/RKQ1.200826.002) baiduboxapp/11.0.5.12 (Baidu; P1 11)' } }
    # 不保证可用性
    # baidumlip: ping -c 1 cloudnproxy.baidu.com | sed '1{s/[^(]*(//;s/).*//;q}'

proxy-groups-anchor:
  # 锚点 如合并时有重复的项,则不会去合并; 锚点名尽量不要含特殊字符
  type_anchor:
    - &type_ut { type: url-test, url: 'https://www.google.com/generate_204', expected-status: '204', tolerance: 20, interval: 150 }
    - &type_fb { type: fallback, url: 'https://www.google.com/generate_204', expected-status: '204', interval: 150 }
    - &type_lb-rr { type: load-balance, strategy: round-robin, url: 'https://www.google.com/generate_204', expected-status: '204', interval: 150 }
    # - &type_lb-ss { type: load-balance,strategy: sticky-sessions,url: 'https://www.google.com/generate_204',expected-status: '204',interval: 150 }
  proxies_anchor:
    # - &proxies_default { proxies: ['PASS', 'Proxy', 'Local', '香港', '台湾', '日本', '狮城', '英国', '美国'] }
    - &proxies_direct { proxies: ['Local', 'Proxy', 'PASS', '香港', '台湾', '日本', '狮城', '英国', '美国'] }
    - &proxies_proxy { proxies: ['Proxy', 'Local', 'PASS', '香港', '台湾', '日本', '狮城', '英国', '美国'] }
    - &proxies_out { proxies: ['香港', '台湾', '日本', '狮城', '英国', '美国'] }
    - &proxies_reject { proxies: ['REJECT-DROP', 'REJECT', 'PASS'] }
  filter_anchor:
    # - &exclude_eb { exclude-filter: '回国|校园' } # 排除回国
    # - &filter_0x { filter: '0倍|(?i:x?0x?)' } # 倍率
    # - &filter_0.1x { filter: '0\.2倍|(?i:x?0\.2x?)' }
    # - &filter_0.5x { filter: '0\.25倍|(?i:x?0\.25x?)' }
    # - &filter_0.8x { filter: '0\.5倍|(?i:x?0\.5x?)' }
    - &filter_hk { filter: '(?:🇭🇰|港|(?i:\b(?:hk|hkg|hong|hongkong)\b))' }
    # - &filter_hk_1 {filter: '(?=.*#1)(?=.*(?:🇭🇰|港|(?i:hk|hkg|hong|hongkong)\b))'} # 包含 #1 的香港
    - &filter_tw { filter: '(?:🇹🇼|台|高雄|(?i:\b(?:tw|twn|tai|taiwan)\b))' }
    - &filter_jp { filter: '(?:🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(?i:\b(?:jp|jpn|japan)\b))' }
    # - &filter_kr { filter: '(?:🇰🇷|韩国|南韩|首尔|釜山|(?i:\b(?:kr|kor|korea|South\s*Korea)\b))' }
    - &filter_sg { filter: '(?:🇸🇬|新加坡|狮|(?i:\b(?:sg|sgp|singapore)\b))' }
    - &filter_us { filter: '(?:🇺🇸|美|凤凰城|硅谷|洛杉矶|西雅图|芝加哥|(?i:\b(?:us|usa|united\s*states)\b))' }
    # - &filter_ru { filter: '(?:🇷🇺|俄罗斯|俄联邦|莫斯科|圣彼得堡|西伯利亚|(?i:\b(?:ru|rus|russia)\b))' }
    # - &filter_tr { filter: '(?:🇹🇷|土耳其|安卡拉|伊斯坦布尔|伊兹密尔|(?i:\b(?:tr|tur|turkey)\b))' }
    # - &filter_ar { filter: '(?:🇦🇷|阿根廷|布宜诺斯艾利斯|罗萨里奥|门多萨|(?i:\b(?:ar|arg|argentina)\b))' }
    # - &filter_in { filter: '(?:🇮🇳|印度|新德里|孟买|班加罗尔|加尔各答|(?i:\b(?:in|ind|india)\b))' }
    - &filter_gb { filter: '(?:🇬🇧|英|伦敦|曼彻斯特|(?i:\b(?:uk|gb|gbr|united\s*kingdom|britain)\b))' }
    # - &filter_fr { filter: '(?:🇫🇷|法|巴黎|马赛|(?i:\b(?:fr|fra|france)\b))' }
    # - &filter_de { filter: '(?:🇩🇪|德|柏林|慕尼黑|(?i:\b(?:de|deu|germany)\b))' }
    # - &filter_lu { filter: '(?:🇱🇺|卢森堡|(?i:\b(?:lu|lux|luxembourg|bt|pt)\b))' } # Torrent专用

proxy-groups:
  # 策略组可以包含多个代理,或多个远程代理集; 不包含任何代理的策略组,会被当作为 DIRECT 策略处理; 如策略组代理来自远程代理集时,则使用 proxy-providers 的 health-check
  - { name: 'Proxy', type: select, proxies: ['Fallback', 'Load balance', 'Local', '香港', '台湾', '日本', '狮城', '英国', '美国'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Final.png' }
  - { name: 'Local', type: select, url: 'https://connectivitycheck.platform.hicloud.com/generate_204', expected-status: '204', interval: 0, proxies: ['DIRECT', '以太网', 'WLAN', '以太网 + WLAN', 'wlan0 + wlan1', 'data0 + wlan0', 'data0 + wlan1', 'data1 + wlan0', 'data1 + wlan1', 'data2 + wlan0', 'data2 + wlan1', 'data3 + wlan0', 'data3 + wlan1'], use: ['Baidu'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/China_Map.png' }
  - { name: 'NoChina', type: select, <<: *proxies_proxy, icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Global.png' }
  - { name: 'Message', type: select, <<: *proxies_direct, icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Google_Search.png' }
  - { name: 'Telegram', type: select, <<: *proxies_proxy, icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Telegram.png' }
  - { name: 'WeChat', type: select, <<: *proxies_proxy, icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/WeChat.png' }
  - { name: 'YouTube', type: select, <<: *proxies_proxy, icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/YouTube.png' }
  # - { name: 'Emby', type: select, <<: *proxies_default, icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Emby.png' }
  - { name: 'OneDrive', type: select, <<: *proxies_direct, icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/OneDrive.png' }
  # - { name: 'LModel',type: select,url: 'https://api.openai.com/cdn-cgi/trace',<<: [ *proxies_proxy ],icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/ChatGPT.png' }
  - { name: 'GameCN', type: select, <<: *proxies_direct, icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Game.png' }
  - { name: 'BiliCDN', type: select, <<: *proxies_reject, icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/bilibili.png' }
  - { name: 'WebRTC', type: select, <<: *proxies_reject, icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Area.png' }
  # - { name: 'QUIC',type: select,proxies: [ PASS,REJECT-DROP ],icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Proxy.png' }
  # - { name: 'disable-udp',type: select,disable-udp:true,<<: *proxies_out ,icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Proxy.png'}
  - { name: 'Httpdns', type: select, <<: *proxies_reject, icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Hijacking.png' }
  - { name: 'Advert', type: select, <<: *proxies_reject, icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Advertising.png' }
  - { name: 'Update', type: select, proxies: [Local, Proxy], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Stack.png' }
  # - { name: '倍率',type: select,proxies: [ 0x,0.1x,0.5x,0.8x ],icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Speedtest.png' }
  - { name: '香港', type: select, proxies: ['香港 A', '香港 B', '香港 C', '香港 D'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Hong_Kong.png' }
  - { name: '香港 A', <<: [*type_ut, *filter_hk], use: ['Provider_1'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Hong_Kong.png', hidden: true }
  - { name: '香港 B', <<: [*type_ut, *filter_hk], use: ['Provider_2'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Hong_Kong.png', hidden: true }
  - { name: '香港 C', <<: [*type_ut, *filter_hk], use: ['Provider_3'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Hong_Kong.png', hidden: true }
  - { name: '香港 D', <<: [*type_ut, *filter_hk], use: ['Provider_4'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Hong_Kong.png', hidden: true }
  - { name: '台湾', type: select, proxies: ['台湾 A', '台湾 B', '台湾 C', '台湾 D'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Taiwan.png' }
  - { name: '台湾 A', <<: [*type_ut, *filter_tw], use: ['Provider_1'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Taiwan.png', hidden: true }
  - { name: '台湾 B', <<: [*type_ut, *filter_tw], use: ['Provider_2'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Taiwan.png', hidden: true }
  - { name: '台湾 C', <<: [*type_ut, *filter_tw], use: ['Provider_3'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Taiwan.png', hidden: true }
  - { name: '台湾 D', <<: [*type_ut, *filter_tw], use: ['Provider_4'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Taiwan.png', hidden: true }
  - { name: '日本', type: select, proxies: ['日本 A', '日本 B', '日本 C', '日本 D'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Japan.png' }
  - { name: '日本 A', <<: [*type_ut, *filter_jp], use: ['Provider_1'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Japan.png', hidden: true }
  - { name: '日本 B', <<: [*type_ut, *filter_jp], use: ['Provider_2'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Japan.png', hidden: true }
  - { name: '日本 C', <<: [*type_ut, *filter_jp], use: ['Provider_3'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Japan.png', hidden: true }
  - { name: '日本 D', <<: [*type_ut, *filter_jp], use: ['Provider_4'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Japan.png', hidden: true }
  - { name: '狮城', type: select, proxies: ['狮城 A', '狮城 B', '狮城 C', '狮城 D'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Singapore.png' }
  - { name: '狮城 A', <<: [*type_ut, *filter_sg], use: ['Provider_1'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Singapore.png', hidden: true }
  - { name: '狮城 B', <<: [*type_ut, *filter_sg], use: ['Provider_2'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Singapore.png', hidden: true }
  - { name: '狮城 C', <<: [*type_ut, *filter_sg], use: ['Provider_3'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Singapore.png', hidden: true }
  - { name: '狮城 D', <<: [*type_ut, *filter_sg], use: ['Provider_4'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Singapore.png', hidden: true }
  - { name: '英国', type: select, proxies: ['英国 A', '英国 B', '英国 C', '英国 D'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_Kingdom.png' }
  - { name: '英国 A', <<: [*type_ut, *filter_gb], use: ['Provider_1'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_Kingdom.png', hidden: true }
  - { name: '英国 B', <<: [*type_ut, *filter_gb], use: ['Provider_2'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_Kingdom.png', hidden: true }
  - { name: '英国 C', <<: [*type_ut, *filter_gb], use: ['Provider_3'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_Kingdom.png', hidden: true }
  - { name: '英国 D', <<: [*type_ut, *filter_gb], use: ['Provider_4'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_Kingdom.png', hidden: true }
  - { name: '美国', type: select, proxies: ['美国 A', '美国 B', '美国 C', '美国 D'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_States.png' }
  - { name: '美国 A', <<: [*type_ut, *filter_us], use: ['Provider_1'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_States.png', hidden: true }
  - { name: '美国 B', <<: [*type_ut, *filter_us], use: ['Provider_2'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_States.png', hidden: true }
  - { name: '美国 C', <<: [*type_ut, *filter_us], use: ['Provider_3'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_States.png', hidden: true }
  - { name: '美国 D', <<: [*type_ut, *filter_us], use: ['Provider_4'], icon: 'https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_States.png', hidden: true }
  - { name: 'Fallback', <<: [*type_fb, *proxies_out], hidden: true }
  - { name: 'Load balance', <<: [*type_lb-rr, *proxies_out], hidden: true }
  - { name: '以太网 + WLAN', url: 'https://connectivitycheck.platform.hicloud.com/generate_204', <<: *type_lb-rr, proxies: [以太网, WLAN], hidden: true }
  - { name: 'wlan0 + wlan1', url: 'https://connectivitycheck.platform.hicloud.com/generate_204', <<: *type_lb-rr, proxies: [wlan0, wlan1], hidden: true }
  - { name: 'data0 + wlan0', url: 'https://connectivitycheck.platform.hicloud.com/generate_204', <<: *type_lb-rr, proxies: [rmnet_data0, wlan0], hidden: true }
  - { name: 'data0 + wlan1', url: 'https://connectivitycheck.platform.hicloud.com/generate_204', <<: *type_lb-rr, proxies: [rmnet_data0, wlan1], hidden: true }
  - { name: 'data1 + wlan0', url: 'https://connectivitycheck.platform.hicloud.com/generate_204', <<: *type_lb-rr, proxies: [rmnet_data1, wlan0], hidden: true }
  - { name: 'data1 + wlan1', url: 'https://connectivitycheck.platform.hicloud.com/generate_204', <<: *type_lb-rr, proxies: [rmnet_data1, wlan1], hidden: true }
  - { name: 'data2 + wlan0', url: 'https://connectivitycheck.platform.hicloud.com/generate_204', <<: *type_lb-rr, proxies: [rmnet_data2, wlan0], hidden: true }
  - { name: 'data2 + wlan1', url: 'https://connectivitycheck.platform.hicloud.com/generate_204', <<: *type_lb-rr, proxies: [rmnet_data2, wlan1], hidden: true }
  - { name: 'data3 + wlan0', url: 'https://connectivitycheck.platform.hicloud.com/generate_204', <<: *type_lb-rr, proxies: [rmnet_data3, wlan0], hidden: true }
  - { name: 'data3 + wlan1', url: 'https://connectivitycheck.platform.hicloud.com/generate_204', <<: *type_lb-rr, proxies: [rmnet_data3, wlan1], hidden: true }

rule-providers-anchor:
  # 锚点 如合并时有重复的项,则不会去合并; 锚点名尽量不要含特殊字符
  - &rule_domain { type: http, behavior: domain, format: mrs, proxy: 'Update', interval: 86400 }
  - &rule_ipcidr { type: http, behavior: ipcidr, format: mrs, proxy: 'Update', interval: 86400 }
  # - &rule_asn { type: http,behavior: ipcidr,format: mrs,proxy: 'Update',interval: 86400 }
  - &rule_classical { type: http, behavior: classical, format: yaml, proxy: 'Update', interval: 86400 }

rule-providers:
  # 对于去广告,按 IP 地理信息分流等需要大量规则的场景,建议使用 domain 或 ipcidr 类型的规则集合,这能有效降低内存占用并提高匹配速度
  # 不建议使用大量 classical 类型的规则集合。此类规则只能进行顺序匹配，会显著增加匹配耗时和内存占用
  site_category-httpdns-cn: { <<: *rule_domain, path: './rule_providers/domain/category-httpdns-cn', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/category-httpdns-cn.mrs' }
  # site_ads: { <<: *rule_domain, path: './rule_providers/domain/category-ads-all', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/category-ads-all.mrs' }
  site_ads: { <<: *rule_domain, path: './rule_providers/domain/dns-blocklists-normal', url: 'https://raw.githubusercontent.com/yiteei/Clash/refs/heads/Meta/rules/site/dns-blocklists-normal.mrs' }
  site_private: { <<: *rule_domain, path: './rule_providers/domain/private', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/private.mrs' }
  site_googlefcm: { <<: *rule_domain, path: './rule_providers/domain/googlefcm', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/googlefcm.mrs' }
  site_telegram: { <<: *rule_domain, path: './rule_providers/domain/telegram', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/telegram.mrs' }
  site_wechat:
    type: inline
    <<: *rule_domain
    payload:
      - short.weixin.qq.com
      - +short.weixin.qq.com
      - long.weixin.qq.com
      - +long.weixin.qq.com
  site_youtube: { <<: *rule_domain, path: './rule_providers/domain/youtube', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/youtube.mrs' }
  site_onedrive: { <<: *rule_domain, path: './rule_providers/domain/onedrive', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/onedrive.mrs' }
  site_category-games@cn: { <<: *rule_domain, path: './rule_providers/domain/category-games@cn', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/category-games@cn.mrs' }
  site_gfw: { <<: *rule_domain, path: './rule_providers/domain/gfw', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/gfw.mrs' }
  site_geolocation-cn: { <<: *rule_domain, path: './rule_providers/domain/geolocation-cn', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/geolocation-cn.mrs' }
  site_geolocation-!cn: { <<: *rule_domain, path: './rule_providers/domain/geolocation-!cn', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/geolocation-!cn.mrs' }
  site_cn: { <<: *rule_domain, path: './rule_providers/domain/cn', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/cn.mrs' }
  ip_private: { <<: *rule_ipcidr, path: './rule_providers/ipcidr/private', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/private.mrs' }
  ip_telegram: { <<: *rule_ipcidr, path: './rule_providers/ipcidr/telegram', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/telegram.mrs' }
  ip_cn: { <<: *rule_ipcidr, path: './rule_providers/ipcidr/cn', url: 'https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/cn.mrs' }
  classical_httpdns:
    # 来源 https://raw.githubusercontent.com/QingRex/LoonKissSurge/refs/heads/main/Surge/%E6%8B%A6%E6%88%AAHTTPDNS.sgmodule
    type: inline
    <<: *rule_classical
    payload:
      # 阿里巴巴
      - DOMAIN,httpdns.alicdn.com
      # 阿里云
      - DOMAIN,httpdns-api.aliyuncs.com
      - DOMAIN,httpdns-sc.aliyuncs.com
      - IP-CIDR,203.107.1.0/24
      # 淘宝
      - DOMAIN,httpdns.danuoyi.tbcache.com
      # 腾讯云
      - IP-CIDR,119.29.29.98/32
      - IP-CIDR,119.29.29.99/32
      # 网易
      - DOMAIN,httpdns.music.163.com
      - DOMAIN,httpdns.n.netease.com
      - DOMAIN,httpdns-sdk.n.netease.com
      - DOMAIN,httpdns.yunxindns.com
      - DOMAIN,lofter.httpdns.c.163.com
      - DOMAIN,music.httpdns.c.163.com
      - DOMAIN,httpdns.yunxindns.com
      - IP-CIDR,59.111.239.61/32
      - IP-CIDR,59.111.239.62/32
      - IP-CIDR,115.236.121.51/32
      - IP-CIDR,115.236.121.195/32
      # 百度
      - DOMAIN,httpdns.baidu.com
      - DOMAIN,httpsdns.baidu.com
      - DOMAIN,httpdns.bcelive.com
      - DOMAIN,httpdns.baidubce.com
      - DOMAIN,dns.iqiyi.com
      - DOMAIN,doh.iqiyi.com
      - DOMAIN,dns.qiyipic.iqiyi.com
      - DOMAIN,httpdns.n.shifen.com
      - IP-CIDR,186.76.76.200/32
      # 京东
      - DOMAIN,dns.jd.com
      - IP-CIDR,101.124.19.122/32
      - IP-CIDR6,2402:db40:5100:1011::5/128
      - IP-CIDR,103.224.222.208/32
      # 小米
      - DOMAIN,httpdns.browser.miui.com
      - DOMAIN,resolver.msg.xiaomi.net
      # 快手
      - DOMAIN,kuaishou.httpdns.pro
      - DOMAIN,httpdns.kwd.inkuai.com
      - DOMAIN,apidns.kwd.inkuai.com
      - DOMAIN,apidns-js.kwd.inkuai.com
      # 字节跳动
      - DOMAIN,httpdns.volcengineapi.com
      - DOMAIN,dig.bdurl.net
      - DOMAIN,dig.zjurl.cn
      # 微信
      - DOMAIN,dns.weixin.qq.com
      - DOMAIN,dns.weixin.qq.com.cn
      - DOMAIN,aedns.weixin.qq.com
      - IP-CIDR,39.156.140.30/32
      - IP-CIDR,39.156.140.47/32
      - IP-CIDR,39.156.140.245/32
      - IP-CIDR,42.81.232.18/32
      - IP-CIDR,42.187.182.106/32
      - IP-CIDR,42.187.182.123/32
      - IP-CIDR,42.187.184.154/32
      - IP-CIDR,43.130.30.237/32
      - IP-CIDR,43.130.30.240/32
      - IP-CIDR,43.137.153.151/32
      - IP-CIDR,43.137.159.31/32
      - IP-CIDR,43.152.112.101/32
      - IP-CIDR,43.153.248.120/32
      - IP-CIDR,60.28.172.100/32
      - IP-CIDR,61.151.231.157/32
      - IP-CIDR,101.32.104.104/32
      - IP-CIDR,106.39.206.21/32
      - IP-CIDR,106.39.206.25/32
      - IP-CIDR,106.39.206.70/32
      - IP-CIDR,111.31.201.194/32
      - IP-CIDR,111.31.241.76/32
      - IP-CIDR,111.31.241.140/32
      - IP-CIDR,111.206.147.156/32
      - IP-CIDR,111.206.147.210/32
      - IP-CIDR,111.206.148.27/32
      - IP-CIDR,116.128.177.249/32
      - IP-CIDR,116.130.224.150/32
      - IP-CIDR,116.130.224.205/32
      - IP-CIDR,117.185.247.73/32
      - IP-CIDR,123.151.48.171/32
      - IP-CIDR,123.151.48.193/32
      - IP-CIDR,123.151.48.208/32
      - IP-CIDR,123.151.54.50/32
      - IP-CIDR,180.153.202.85/32
      - IP-CIDR,183.192.196.31/32
      - IP-CIDR,203.205.129.102/32
      - IP-CIDR,203.205.234.132/32
      - IP-CIDR,220.196.159.73/32
      - IP-CIDR6,240e:928:1400:10::25/128
      - IP-CIDR6,2402:4e00:8030:1::17/128
      - IP-CIDR6,2402:4e00:1900:1700:0:9554:1ad9:c3a/128
      - IP-CIDR6,2408:8711:10:10::20/128
      - IP-CIDR6,2409:8702:4860:10::4d/128
  classical_flexireject:
    type: inline
    <<: *rule_classical
    payload:
      # Adobe 正版弹窗
      - DOMAIN,ic.adobe.io
      - DOMAIN-REGEX,^[a-z\d]{10}\.adobe\.io$
      - DOMAIN-SUFFIX,adobestats.io
      - DOMAIN,cc-api-data.adobe.io
      # 微信输入法
      - DOMAIN,wetype.weixin.qq.com

rules:
  # 分流规则可以直接引用代理或策略组,但不能引用远程代理集; 对于每一条连接,总是从上到下匹配规则; 需要复杂条件时,可以用逻辑运算符去组合多个规则. 并且逻辑规则是可以相互嵌套的
  - DST-PORT,53,dns-hijack # 劫持 DNS 到 Clash 内部 DNS 模块
  - OR,((RULE-SET,site_private),(RULE-SET,ip_private,no-resolve)),Local # 局域网..
  - OR,((RULE-SET,site_category-httpdns-cn),(RULE-SET,classical_httpdns)),Httpdns # 拦截 HTTPDNS 服务,以确保这些请求能够在 Clash 的 DNS 框架下工作
  - AND,((NETWORK,udp),(DOMAIN-REGEX,(?:stun|turn))),WebRTC # 是否禁用 stun/turn 协议的 UDP 数据,禁用后可以有效解决 WebRTC 的 IP 泄露
  - RULE-SET,classical_flexireject,REJECT-DROP # 自定义拦截
  - RULE-SET,site_ads,Advert # 广告
  # HTTP3/QUIC 协议基于 UDP,在某些代理协议中 UDP 转发效率较低. 可以通过逻辑规则来禁用 QUIC 协议
  # - 'AND,((NETWORK,udp),(NOT,((OR,(RULE-SET,site_cn),(RULE-SET,ip_cn))))),QUIC' # 除 CN 以外的 QUIC
  # - RULE-SET,classical_flexiproxy,??? # 自定义代理
  - AND,((DST-PORT,5228-5230),(RULE-SET,site_googlefcm)),Message # Google FCM,直连确保 DNS 无污染/劫持
  - OR,((DOMAIN-REGEX,^.*\.(mcdn|pcdn)\.bilivideo\.(com|cn)$|^cn-.*\.bilivideo\.(com|cn)$),(DOMAIN-REGEX,^.*\.v1d\.szbdyd\.com$)),BiliCDN # 哔哩哔哩 P/MCDN
  - RULE-SET,site_wechat,WeChat # 微信 自定义
  - OR,((RULE-SET,site_telegram),(RULE-SET,ip_telegram,no-resolve)),Telegram
  - RULE-SET,site_youtube,YouTube
  # - PROCESS-NAME-REGEX,(?i)(Tsukimi|emby),Emby # 不建议使用进程规则
  - RULE-SET,site_onedrive,OneDrive
  - RULE-SET,site_category-games@cn,GameCN # 游戏部分可直连域名
  - RULE-SET,site_gfw,Proxy
  - RULE-SET,site_geolocation-cn,Local # 国内常见域名,CN 参杂了它
  - RULE-SET,site_geolocation-!cn,NoChina # 国外常见域名,CN 参杂了它
  - RULE-SET,site_cn,Local # CN 域名
  - RULE-SET,ip_cn,Local # CN IP
  - MATCH,Proxy # 无需条件,匹配所有请求
